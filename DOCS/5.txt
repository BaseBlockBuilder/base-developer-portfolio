#Verifying your contracts
Once your contract is ready, the next step is to deploy it to a live network and verify its source code.

Verifying a contract means making its source code public, along with the compiler settings you used, which allows anyone to compile it and compare the generated bytecode with the one that is deployed on-chain. Doing this is extremely important in an open platform like Ethereum.

In this guide we'll explain how to do this in the Etherscan explorer.

TIP

If you wish to verify a contract deployed outside of Hardhat Ignition or if you'd like to verify on Sourcify instead of Etherscan, you can use the hardhat-verify plugin.

# Getting an API key from Etherscan
The first thing you need is an API key from Etherscan. To get one, go to their site, sign in (or create an account if you don't have one) and open the "API Keys" tab. Then click the "Add" button and give a name (like "Hardhat") to the API key you are creating. After that you'll see the newly created key in the list.

Store the API key as the configuration variable ETHERSCAN_API_KEY:

$ npx hardhat vars set ETHERSCAN_API_KEY
âœ” Enter value: ********************************
TIP

Learn more about setting and using configuration variable in our guide.

Open your Hardhat config and set the Etherscan API key as the stored configuration variable ETHERSCAN_API_KEY:

TypeScript
JavaScript
import { vars } from "hardhat/config";

const ETHERSCAN_API_KEY = vars.get("ETHERSCAN_API_KEY");

export default {
  // ...rest of the config...
  etherscan: {
    apiKey: ETHERSCAN_API_KEY,
  },
};
# Deploying and verifying a contract in the Sepolia testnet
We are going to use the Sepolia testnet to deploy and verify our contract, so you need to add this network in your Hardhat config. Here we are using Infura to connect to the network, but you can use an alternative JSON-RPC URL like Alchemy if you want.

Infura | Typescript
Alchemy | Typescript
Infura | Javascript
Alchemy | Javascript
// Go to https://infura.io, sign up, create a new API key
// in its dashboard, and store it as the "INFURA_API_KEY"
// configuration variable
const INFURA_API_KEY = vars.get("INFURA_API_KEY");

// Replace this private key with your Sepolia account private key
// To export your private key from Coinbase Wallet, go to
// Settings > Developer Settings > Show private key
// To export your private key from Metamask, open Metamask and
// go to Account Details > Export Private Key
// Store the private key as the "SEPOLIA_PRIVATE_KEY" configuration
// variable.
// Beware: NEVER put real Ether into testing accounts
const SEPOLIA_PRIVATE_KEY = vars.get("SEPOLIA_PRIVATE_KEY");

const ETHERSCAN_API_KEY = vars.get("ETHERSCAN_API_KEY");

export default {
  // ...rest of your config...
  networks: {
    sepolia: {
      url: `https://sepolia.infura.io/v3/${INFURA_API_KEY}`,
      accounts: [SEPOLIA_PRIVATE_KEY],
    },
  },
  etherscan: {
    apiKey: {
      sepolia: ETHERSCAN_API_KEY,
    },
  },
};
To deploy on Sepolia you need to send some Sepolia ether to the address that's going to be making the deployment. You can get testnet ether from a faucet, a service that distributes testing-ETH for free. Here are some for Sepolia:

Alchemy Sepolia Faucet
QuickNode Sepolia Faucet
Ethereum Ecosystem Sepolia Faucet
Now you are ready to deploy your contract, but first we are going to make the source code of our contract unique. The reason we need to do this is that the sample code from the previous section is already verified in Sepolia, so if you try to verify it you'll get an error.

Open your contract and add a comment with something unique, like your GitHub's username. Keep in mind that whatever you include here will be, like the rest of the code, publicly available on Etherscan:

// Author: @janedoe
contract Lock {
To run the deployment we will leverage the Ignition module Lock that we created in the Deploying your contracts guide. Run the deployment using Hardhat Ignition and the newly added Sepolia network:

TypeScript
JavaScript
npx hardhat ignition deploy ignition/modules/Lock.ts --network sepolia --deployment-id sepolia-deployment
TIP

The --deployment-id flag is optional, but it allows you to give a custom name to your deployment. This makes it easier to refer to later, for instance when you want to verify it.

Lastly, to verify the deployed contract, you can run the ignition verify task and pass the deployment Id:

npx hardhat ignition verify sepolia-deployment
Alternatively, you can combine deployment and verification into one step, by invoking the deploy task with the --verify flag:

TypeScript
JavaScript
npx hardhat ignition deploy ignition/modules/Lock.ts --network sepolia --verify
TIP

If you get an error saying that the address does not have bytecode, it probably means that Etherscan has not indexed your contract yet. In that case, wait for a minute and then try again.

After the ignition verify task is successfully executed, you'll see a link to the publicly verified code of your contract.